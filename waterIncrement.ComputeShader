#version 460 core
layout(local_size_x = 32, local_size_y = 32) in;

layout(rgba32f, binding = 0) uniform image2D CD_image_output;

layout(rgba32f, binding = 1) uniform image2D W_image_output;

layout(rgba32f, binding = 2) uniform image2D CD_image;

layout(rgba32f, binding = 3) uniform image2D W_image;

struct Source{
	ivec2 position;
	int radius;

	// Increment Constant
	float Kis;
};

struct Raindrop{
	ivec2 position;
	int radius;

	// Increment Constant
	float Kir;
};

#define MAX_NUMBER_SOURCES 4
#define MAX_NUMBER_RAINDROPS 4

uniform bool isSourceFlow;
uniform int currentNumberSources;
uniform Source sources[MAX_NUMBER_SOURCES];

uniform bool isRain;
uniform int currentNumberRaindrops;
uniform Raindrop raindrops[MAX_NUMBER_RAINDROPS];

// Regolith Constant
uniform float Km;

uniform float maxVegetationValue;

uniform float timeStep;

bool withinSourceRadius(int sourceX, int sourceY, int sourceRadius, int x, int y){
	int differenceX = sourceX - x;
	int differenceY = sourceY - y;

	return (sourceRadius * sourceRadius) >= (differenceX * differenceX + differenceY * differenceY);
}

void main()
{    
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);
    
	vec4 columnData = imageLoad(CD_image, pixelCoords);
	vec4 waterData = imageLoad(W_image, pixelCoords);

	float newWaterHeight = columnData.r;
	float newTerrainHeight = columnData.a;
	float newRegolithHeight = columnData.g;
	float newTimeCovered = waterData.b;
	float newVegetationHeight = columnData.b;
	float newDeadVegetationHeight = waterData.a;

	float sourceIncrementValue = 0;
	float rainIncrementValue = 0;

	// Sources
	if(isSourceFlow){
		for(int i = 0; i < currentNumberSources; i++){
			if(withinSourceRadius(sources[i].position.x, sources[i].position.y, sources[i].radius, pixelCoords.x, pixelCoords.y)){
				sourceIncrementValue += sources[i].Kis * timeStep;
			}
		}		
	}

	// Rain
	if(isRain){
		for(int i = 0; i < currentNumberRaindrops; i++){
			if(withinSourceRadius(raindrops[i].position.x, raindrops[i].position.y, raindrops[i].radius, pixelCoords.x, pixelCoords.y)){
				rainIncrementValue += raindrops[i].Kir * timeStep;
			}
		}
	}

	newWaterHeight += sourceIncrementValue + rainIncrementValue;

	// Add current regolith height back to the terrain height
	newTerrainHeight += columnData.g;

	if(newWaterHeight > 0){
		newTimeCovered = min(2, waterData.b + timeStep);
	}
	else{
		newTimeCovered = max(0, waterData.b - timeStep);
	}

	if(newWaterHeight < Km){
		newRegolithHeight = (newWaterHeight * (1 - ((newVegetationHeight / maxVegetationValue) * 0.8f)));
	}
	else{
		newRegolithHeight = (Km * (1 - ((newVegetationHeight / maxVegetationValue) * 0.8f)));
	}

	if(newTimeCovered > 1 && newVegetationHeight > 0){
		newDeadVegetationHeight += newVegetationHeight;
		newVegetationHeight = 0;
	}

	// Subtract new regolith height from the new terrain height
	newTerrainHeight -= newRegolithHeight;

	imageStore(CD_image_output, pixelCoords, vec4(newWaterHeight, newRegolithHeight, newVegetationHeight, newTerrainHeight));
	imageStore(W_image_output, pixelCoords, vec4(waterData.r, waterData.g, newTimeCovered, newDeadVegetationHeight));
}