#version 460 core
layout(local_size_x = 32, local_size_y = 32) in;

layout(rgba32f, binding = 0) uniform image2D F_image_output;

layout(rgba32f, binding = 1) uniform image2D R_image_output;

layout(rgba32f, binding = 2) uniform image2D CD_image;

layout(rgba32f, binding = 3) uniform image2D W_image;

layout(rgba32f, binding = 4) uniform image2D F_image;

layout(rgba32f, binding = 5) uniform image2D R_image;

uniform bool isRegolith;
uniform float wKf;
uniform float rKf;
uniform float g;
uniform float pipeLength;
uniform float pipeArea;
uniform float width;
uniform float height;
uniform float timeStep;

float regolithHeight(vec4 c, vec4 w){
	return (c.g + w.a + c.b + c.a) * 256;
}

float waterHeight(vec4 c, vec4 w){
	return (c.r) * 256 + regolithHeight(c, w);
}

float waterHeightDifference(vec4 centerColumn, vec4 centerWater, vec4 adjacentColumn, vec4 adjacentWater){
	return waterHeight(centerColumn, centerWater) - waterHeight(adjacentColumn, adjacentWater);
}

float regolithHeightDifference(vec4 centerColumn, vec4 centerWater, vec4 adjacentColumn, vec4 adjacentWater){
	return regolithHeight(centerColumn, centerWater) - regolithHeight(adjacentColumn, adjacentWater);
}

void main()
{    
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

    ivec2 deltaX = ivec2(1, 0);
	ivec2 deltaY = ivec2(0, 1);

	vec4 centerColumnData = imageLoad(CD_image, pixelCoords);
	vec4 centerWaterData = imageLoad(W_image, pixelCoords);
	vec4 centerWaterFlux = imageLoad(F_image, pixelCoords);
	vec4 centerRegolithFlux = imageLoad(R_image, pixelCoords);

	vec4 leftColumnData = imageLoad(CD_image, pixelCoords - deltaX);
	vec4 leftWaterData = imageLoad(W_image, pixelCoords - deltaX);
	vec4 rightColumnData = imageLoad(CD_image, pixelCoords + deltaX);
	vec4 rightWaterData = imageLoad(W_image, pixelCoords + deltaX);
	vec4 topColumnData = imageLoad(CD_image, pixelCoords + deltaY);
	vec4 topWaterData = imageLoad(W_image, pixelCoords + deltaY);
	vec4 bottomColumnData = imageLoad(CD_image, pixelCoords - deltaY);
	vec4 bottomWaterData = imageLoad(W_image, pixelCoords - deltaY);

	// Water flux values
	float leftWaterFlux = 0;
	float rightWaterFlux = 0;
	float topWaterFlux = 0;
	float bottomWaterFlux = 0;

	// Regolith flux values
	float leftRegolithFlux = 0;
	float rightRegolithFlux = 0;
	float topRegolithFlux = 0;
	float bottomRegolithFlux = 0;

	float K;
	
	// Left Flux
	if(pixelCoords.x != 0){
		leftWaterFlux = max(0, wKf * centerWaterFlux.r + (timeStep * pipeArea * (g * waterHeightDifference(centerColumnData, centerWaterData, leftColumnData, leftWaterData) / pipeLength)));
		leftRegolithFlux = max(0, rKf * centerRegolithFlux.r + (timeStep * pipeArea * (g * regolithHeightDifference(centerColumnData, centerWaterData, leftColumnData, leftWaterData) / pipeLength)));
	}

	// Right Flux
	if(pixelCoords.x != width - 1){
		rightWaterFlux = max(0, wKf * centerWaterFlux.g + (timeStep * pipeArea * (g * waterHeightDifference(centerColumnData, centerWaterData, rightColumnData, rightWaterData) / pipeLength)));
		rightRegolithFlux = max(0, rKf * centerRegolithFlux.g + (timeStep * pipeArea * (g * regolithHeightDifference(centerColumnData, centerWaterData, rightColumnData, rightWaterData) / pipeLength)));
	}

	// Top Flux
	if(pixelCoords.y != height - 1){
		topWaterFlux = max(0, wKf * centerWaterFlux.b + (timeStep * pipeArea * (g * waterHeightDifference(centerColumnData, centerWaterData, topColumnData, topWaterData) / pipeLength)));
		topRegolithFlux = max(0, rKf * centerRegolithFlux.b + (timeStep * pipeArea * (g * regolithHeightDifference(centerColumnData, centerWaterData, topColumnData, topWaterData) / pipeLength)));
	}

	// Bottom Flux
	if(pixelCoords.y != 0){
		bottomWaterFlux = max(0, wKf * centerWaterFlux.a + (timeStep * pipeArea * (g * waterHeightDifference(centerColumnData, centerWaterData, bottomColumnData, bottomWaterData) / pipeLength)));
		bottomRegolithFlux = max(0, rKf * centerRegolithFlux.a + (timeStep * pipeArea * (g * regolithHeightDifference(centerColumnData, centerWaterData, bottomColumnData, bottomWaterData) / pipeLength)));
	}

	// Scaling Factor K
	if((leftWaterFlux != 0 || rightWaterFlux != 0 || topWaterFlux != 0 || bottomWaterFlux != 0)){
		K = min(1, (centerColumnData.r * pipeLength * pipeLength) / ((leftWaterFlux + rightWaterFlux + topWaterFlux + bottomWaterFlux) * timeStep));
	}
	else{
		K = 0;
	}

	// Scale each water flux by K
	leftWaterFlux *= K;
	rightWaterFlux *= K;
	topWaterFlux *= K;
	bottomWaterFlux *= K;

	// Scaling Factor K
	if((leftRegolithFlux != 0 || rightRegolithFlux != 0 || topRegolithFlux != 0 || bottomRegolithFlux != 0) && isRegolith){
		K = min(1, (centerColumnData.g * pipeLength * pipeLength) / ((leftRegolithFlux + rightRegolithFlux + topRegolithFlux + bottomRegolithFlux) * timeStep));
	}
	else{
		K = 0;
	}

	// Scale each regolith flux by K
	leftRegolithFlux *= K;
	rightRegolithFlux *= K;
	topRegolithFlux *= K;
	bottomRegolithFlux *= K;

	imageStore(F_image_output, pixelCoords, vec4(leftWaterFlux, rightWaterFlux, topWaterFlux, bottomWaterFlux));
	imageStore(R_image_output, pixelCoords, vec4(leftRegolithFlux, rightRegolithFlux, topRegolithFlux, bottomRegolithFlux));
}