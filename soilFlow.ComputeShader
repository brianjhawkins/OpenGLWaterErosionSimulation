#version 460 core
layout(local_size_x = 32, local_size_y = 32) in;

layout(rgba32f, binding = 0) uniform image2D S_image_output;

layout(rgba32f, binding = 1) uniform image2D SC_image_output;

layout(rgba32f, binding = 2) uniform image2D CD_image;

uniform float timeStep;

uniform float talusHeightDiff;

float Height(vec4 column){
	return column.b + column.a;
}

float HeightDifference(float centerHeight, float adjacentHeight){
	return max(0, centerHeight - adjacentHeight);
}

float HeightDifference(vec4 center, vec4 adjacent){
	return HeightDifference(Height(center), Height(adjacent));
}

void main()
{    
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

	vec2 imageSize = imageSize(S_image_output);
    ivec2 deltaX = ivec2(1, 0);
	ivec2 deltaY = ivec2(0, 1);

	vec4 centerColumn = imageLoad(CD_image, pixelCoords);

	float centerHeight = Height(centerColumn);

	vec4 leftColumn = imageLoad(CD_image, pixelCoords - deltaX);
	vec4 rightColumn = imageLoad(CD_image, pixelCoords + deltaX);
	vec4 topColumn = imageLoad(CD_image, pixelCoords + deltaY);
	vec4 bottomColumn = imageLoad(CD_image, pixelCoords - deltaY);

	float leftHeight = Height(leftColumn);
	float rightHeight = Height(rightColumn);
	float topHeight = Height(topColumn);
	float bottomHeight = Height(bottomColumn);
	
	vec4 bottomLeftColumn = imageLoad(CD_image, pixelCoords - deltaX - deltaY);
	vec4 bottomRightColumn = imageLoad(CD_image, pixelCoords + deltaX - deltaY);
	vec4 topLeftColumn = imageLoad(CD_image, pixelCoords - deltaX + deltaY);
	vec4 topRightColumn = imageLoad(CD_image, pixelCoords + deltaX + deltaY);

	float bottomLeftHeight = Height(bottomLeftColumn);
	float bottomRightHeight = Height(bottomRightColumn);
	float topLeftHeight = Height(topLeftColumn);
	float topRightHeight = Height(topRightColumn);

	float maxHeightDifference = 0;
	float A = 0;

	float newLeftValue = 0;
	float newRightValue = 0;
	float newTopValue = 0;
	float newBottomValue = 0;
	
	float newBottomLeftValue = 0;
	float newBottomRightValue = 0;
	float newTopLeftValue = 0;
	float newTopRightValue = 0;

	// Left
	if(pixelCoords.x != 0 && HeightDifference(centerHeight, leftHeight) > talusHeightDiff){
		maxHeightDifference = max(maxHeightDifference, HeightDifference(centerHeight, leftHeight));
		A += HeightDifference(centerHeight, leftHeight);
		newLeftValue = HeightDifference(centerHeight, leftHeight);
	}

	// Right
	if(pixelCoords.x != imageSize.x - 1 && HeightDifference(centerHeight, rightHeight) > talusHeightDiff){
		maxHeightDifference = max(maxHeightDifference, HeightDifference(centerHeight, rightHeight));
		A += HeightDifference(centerHeight, rightHeight);
		newRightValue = HeightDifference(centerHeight, rightHeight);
	}

	// Top
	if(pixelCoords.y != imageSize.y - 1 && HeightDifference(centerHeight, topHeight) > talusHeightDiff){
		maxHeightDifference = max(maxHeightDifference, HeightDifference(centerHeight, topHeight));
		A += HeightDifference(centerHeight, topHeight);
		newTopValue = HeightDifference(centerHeight, topHeight);
	}

	// Bottom
	if(pixelCoords.y != 0 && HeightDifference(centerHeight, bottomHeight) > talusHeightDiff){
		maxHeightDifference = max(maxHeightDifference, HeightDifference(centerHeight, bottomHeight));
		A += HeightDifference(centerHeight, bottomHeight);
		newBottomValue = HeightDifference(centerHeight, bottomHeight);
	}

	// Bottom Left
	if(pixelCoords.x != 0 && pixelCoords.y != 0 && HeightDifference(centerHeight, bottomLeftHeight) > talusHeightDiff){
		maxHeightDifference = max(maxHeightDifference, HeightDifference(centerHeight, bottomLeftHeight));
		A += HeightDifference(centerHeight, bottomLeftHeight);
		newBottomLeftValue = HeightDifference(centerHeight, bottomLeftHeight);
	}

	// Bottom Right
	if(pixelCoords.x != imageSize.x - 1 && pixelCoords.y != 0 && HeightDifference(centerHeight, bottomRightHeight) > talusHeightDiff){
		maxHeightDifference = max(maxHeightDifference, HeightDifference(centerHeight, bottomRightHeight));
		A += HeightDifference(centerHeight, bottomRightHeight);
		newBottomRightValue = HeightDifference(centerHeight, bottomRightHeight);
	}

	// Top Left
	if(pixelCoords.x != 0 && pixelCoords.y != imageSize.y - 1 && HeightDifference(centerHeight, topLeftHeight) > talusHeightDiff){
		maxHeightDifference = max(maxHeightDifference, HeightDifference(centerHeight, topLeftHeight));
		A += HeightDifference(centerHeight, topLeftHeight);
		newTopLeftValue = HeightDifference(centerHeight, topLeftHeight);
	}

	// Top Right
	if(pixelCoords.x != imageSize.x - 1 && pixelCoords.y != imageSize.y - 1 && HeightDifference(centerHeight, topRightHeight) > talusHeightDiff){
		maxHeightDifference = max(maxHeightDifference, HeightDifference(centerHeight, topRightHeight));
		A += HeightDifference(centerHeight, topRightHeight);
		newTopRightValue = HeightDifference(centerHeight, topRightHeight);
	}

	float columnArea = (1.0f / (imageSize.x)) * (1.0f / (imageSize.y));
	float Kt = 0.15;
	// Kt = 0;

	float sedimentVolume = columnArea * timeStep * Kt * (maxHeightDifference / 2);
	//sedimentVolume *= 10000000;

	if(A != 0){
		newLeftValue *= sedimentVolume / A;
		newRightValue *= sedimentVolume / A;
		newTopValue *= sedimentVolume / A;
		newBottomValue *= sedimentVolume / A;
		newBottomLeftValue *= sedimentVolume / A;
		newBottomRightValue *= sedimentVolume / A;
		newTopLeftValue *= sedimentVolume / A;
		newTopRightValue *= sedimentVolume / A;
	}

	imageStore(S_image_output, pixelCoords, vec4(newLeftValue, newRightValue, newTopValue, newBottomValue));
	imageStore(SC_image_output, pixelCoords, vec4(newBottomLeftValue, newBottomRightValue, newTopLeftValue, newTopRightValue));
}