#version 460 core
layout(local_size_x = 32, local_size_y = 32) in;

layout(rgba32f, binding = 0) uniform image2D image_output;

layout(rgba32f, binding = 1) uniform image2D CD1_image;

layout(rgba32f, binding = 2) uniform image2D CD2_image;

layout(rgba32f, binding = 3) uniform image2D F_image;

layout(rgba32f, binding = 4) uniform image2D V_image;

void main()
{    
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

	vec2 imageSize = imageSize(image_output);
    ivec2 deltaX = ivec2(1, 0);
	ivec2 deltaY = ivec2(0, 1);

	vec4 centerColumn1 = imageLoad(CD1_image, pixelCoords);
	vec4 centerColumn2 = imageLoad(CD2_image, pixelCoords);
	vec4 centerFlux = imageLoad(F_image, pixelCoords);
	vec4 centerVelocity = imageLoad(V_image, pixelCoords);

	float averageWaterHeight;

	float inLeft = 0;
	float inRight = 0;
	float inTop = 0;
	float inBottom = 0;

	float Wx;
	float Wy;
	float velocityX;
	float velocityY;

	// Determine how much flux is coming into a column based on its neighbor's outgoing flux values (left, right, top, bottom)
	if(pixelCoords.x == 0){
		inLeft = 0;
	}
	else{
		inLeft = imageLoad(F_image, pixelCoords - deltaX).g;
	}

	if(pixelCoords.x == imageSize.x - 1){
		inRight = 0;
	}
	else{
		inRight = imageLoad(F_image, pixelCoords + deltaX).r;
	}

	if(pixelCoords.y == imageSize.y - 1){
		inTop = 0;
	}
	else{
		inTop = imageLoad(F_image, pixelCoords + deltaY).a;
	}

	if(pixelCoords.y == 0){
		inBottom = 0;
	}
	else{
		inBottom = imageLoad(F_image, pixelCoords - deltaY).b;
	}

	// Average amount of water passing through a column in the x and y directions
	Wx = (inLeft - centerFlux.r + centerFlux.g - inRight) / 2;
	Wy = (inTop - centerFlux.b + centerFlux.a - inBottom) / 2;

	// Average water height this update cycle based on what the water height was before the changes were made to it in the cycle
	averageWaterHeight = (centerColumn1.r + centerColumn2.r) / 2;

	if(averageWaterHeight == 0){
		velocityX = 0;
		velocityY = 0;
	}
	else{
		velocityX = Wx / ((1.0f / imageSize.x) * averageWaterHeight);
		velocityY = Wy / ((1.0f / imageSize.y) * averageWaterHeight);
	}

	imageStore(image_output, pixelCoords, vec4(velocityX, velocityY, centerVelocity.b, centerVelocity.a));
}