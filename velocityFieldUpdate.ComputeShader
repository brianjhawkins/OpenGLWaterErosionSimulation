#version 460 core
layout(local_size_x = 32, local_size_y = 32) in;

layout(rgba32f, binding = 0) uniform image2D V_image_output;

layout(rgba32f, binding = 1) uniform image2D CD1_image;

layout(rgba32f, binding = 2) uniform image2D CD2_image;

layout(rgba32f, binding = 3) uniform image2D F_image;

layout(rgba32f, binding = 4) uniform image2D V_image;

uniform float pipeLength;
uniform float width;
uniform float height;

void main()
{    
	ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

    ivec2 deltaX = ivec2(1, 0);
	ivec2 deltaY = ivec2(0, 1);

	vec4 centerColumn1 = imageLoad(CD1_image, pixelCoords);
	vec4 centerColumn2 = imageLoad(CD2_image, pixelCoords);
	vec4 centerFlux = imageLoad(F_image, pixelCoords);
	vec4 centerVelocity = imageLoad(V_image, pixelCoords);

	float averageWaterHeight;

	float inLeft = 0;
	float inRight = 0;
	float inTop = 0;
	float inBottom = 0;

	float Wx;
	float Wy;
	float velocityX = 0;
	float velocityY = 0;

	// Determine how much flux is coming into a column based on its neighbor's outgoing flux values (left, right, top, bottom)
	if(pixelCoords.x != 0){
		inLeft = imageLoad(F_image, pixelCoords - deltaX).g;
	}

	if(pixelCoords.x != width - 1){
		inRight = imageLoad(F_image, pixelCoords + deltaX).r;
	}

	if(pixelCoords.y != height - 1){
		inTop = imageLoad(F_image, pixelCoords + deltaY).a;
	}

	if(pixelCoords.y != 0){
		inBottom = imageLoad(F_image, pixelCoords - deltaY).b;
	}

	// Average amount of water passing through a column in the x and y directions
	Wx = (inLeft - centerFlux.r + centerFlux.g - inRight) / 2;
	Wy = (inTop - centerFlux.b + centerFlux.a - inBottom) / 2;

	// Average water height this update cycle based on what the water height was before the changes were made to it in the cycle
	averageWaterHeight = (centerColumn1.r + centerColumn2.r) / 2;

	if(averageWaterHeight != 0){
		velocityX = Wx / (pipeLength * averageWaterHeight);
		velocityY = Wy / (pipeLength * averageWaterHeight);
	}

	imageStore(V_image_output, pixelCoords, vec4(velocityX, velocityY, centerVelocity.b, centerVelocity.a));
}